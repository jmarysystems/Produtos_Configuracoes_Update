/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package imagens_dos_produtos;

import java.awt.Image;
import java.awt.MediaTracker;
import java.awt.image.BufferedImage;
import java.awt.image.RenderedImage;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 *
 * @author Ariel Arcanjo
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbConteudo_Online = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lbConteudo_Online.setText("jLabel1");

        jButton1.setText("Baixar Imagens");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Gerar html");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton2MouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton2MousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbConteudo_Online, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 838, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbConteudo_Online, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 17, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        iniciar();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MousePressed
        new Thread() {   @Override public void run() { try { Thread.sleep( 1 );

            if( jButton2.isEnabled() == true ) { jButton2.setEnabled(false);

                /*
                JFileChooserJM JFileChooserJM = new JFileChooserJM( "  imagens    -   jmarysystems.blogspot.com.br", new String [] { "XLS" , "XLSX" } );
                String strdevolvida = JFileChooserJM.getString( 2 );
                */
                
                String s = System.getProperty("file.separator");
                String internalStorageDir = System.getProperty("user.dir");
    
                String strdevolvida = internalStorageDir + s +"00_Externo"+ s + "00_PLANILHAS"+ s + "excel_codificado_2" + ".xls";

                if( !strdevolvida.equals("") ){
                    
                    ImportarExportarExcel ImportarDadosDoExcel = new ImportarExportarExcel();            
                    ImportarDadosDoExcel.Importar( new File( strdevolvida ) );
                }
                jButton2.setEnabled(true);
            }
        } catch( Exception e ){ jButton2.setEnabled(true); } } }.start();
    }//GEN-LAST:event_jButton2MousePressed

    private void jButton2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2MouseExited

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lbConteudo_Online;
    // End of variables declaration//GEN-END:variables

    String s = System.getProperty("file.separator");
    String internalStorageDir = System.getProperty("user.dir");
    
    String eans_para_pesquisar = internalStorageDir + s +"00_Externo"+ s + "eans_para_pesquisar"+ s + "eans_para_pesquisar" + ".txt";
    
    private void iniciar(){
        
        new Thread() {   @Override public void run() { /*Thread.sleep( 1 );*/         
            try {
                
                String endereco_txt = internalStorageDir + s + "00_Externo" + s + "ultimo_int_pesquisado" + ".txt";
                
                // Cria arquivo
                File file = new File( endereco_txt );

                // Se o arquivo nao existir, ele gera
                if (!file.exists()) {
                    file.createNewFile();
                    
                    // Prepara para escrever no arquivo
                    FileWriter fw = new FileWriter(file.getAbsoluteFile());
                    BufferedWriter bw = new BufferedWriter(fw);
            
                    // Escreve e fecha arquivo
                    bw.write("1");
                    bw.close();
                }
                
                // Le o arquivo
                FileReader ler = new FileReader( endereco_txt );
                BufferedReader reader = new BufferedReader(ler);  
                String linha;
                while( (linha = reader.readLine()) != null ){
                    contador = Integer.valueOf( linha.trim() );
                }
                
                lerTxt();
                
            } catch (Exception e) {}
        } }.start();
    }
    
    int contador = 1;
    int contador_interno = 1;
    private void lerTxt(){
        
        //System.out.println( "Iniciado - " + contador );
        
        new Thread() {   @Override public void run() { try { //Thread.sleep( 1 );
        
            // abertura do arquivo
                    BufferedReader bR = new BufferedReader(
                        new InputStreamReader(
                            new FileInputStream( 
                                new File( eans_para_pesquisar ) 
                            ) 
                        )
                    );
                    
                    StringBuilder sb = new StringBuilder();

                    String linha;
                    while ((linha = bR.readLine()) != null) { // 17790
                        
                        jLabel1.setText( "Pesquisando - Contador: " + contador + " - Ean: " + linha + "Contador Interno - " + contador_interno );

                        if( contador_interno >= contador  ){                           
                        
                            setarImagemExterna( contador, linha ); 
                            
                            contador++;
                        }                        
                        
                        contador_interno++;
                                                
                        //Thread.sleep( 100 );
                    }
            
        } catch( Exception e ){ } } }.start();
    }
    
    ImageIcon     icon   = null;
    public void setarImagemExterna( int ultimoInt, String ean ){
        try {  
            
            lbConteudo_Online.setText( "" );

            //BufferedImage bufImg = null;
            //ImageIcon     icon   = null;
            Image         image  = null;
            //int widith = image.getWidth(icon.getImageObserver() );
            //int height = image.getHeight(icon.getImageObserver());
            //try {
                /*
                // inicializa a imagem URL dentro de um objeto ImageIcon
                URL urlImg = new URL( "https://cdn-cosmos.bluesoft.com.br/products/" + ean );
                icon = new ImageIcon(urlImg);
                // faz o preload da imagem
                while( icon.getImageLoadStatus() == MediaTracker.LOADING ); 

                image  = icon.getImage();
                lbConteudo_Online.setIcon(new ImageIcon(image.getScaledInstance(image.getWidth(icon.getImageObserver() ), image.getHeight(icon.getImageObserver()), Image.SCALE_DEFAULT)));
                lbConteudo_Online.revalidate();
                
                ImageIO.write((RenderedImage) icon, "png", new File( internalStorageDir +s+"00_Externo"+s+"imagens_salvas"+s+ean+ ".png" ) );
                */
                
        URL imageUrl;
        BufferedImage image22 = null;
        //try {
            imageUrl = new URL( "https://cdn-cosmos.bluesoft.com.br/products/" + ean );
            HttpURLConnection connection = (HttpURLConnection) imageUrl.openConnection();
                    connection.setRequestProperty(
                            "User-Agent",
                            "Mozilla/5.0 (Windows NT 6.3; WOW64; rv:37.0) Gecko/20100101 Firefox/37.0");
            image22 = ImageIO.read(connection.getInputStream());
        //} catch (Exception ex) {}        
        
        icon = new ImageIcon(image22);
        image  = icon.getImage();
        try{
            
            //new Thread() {   @Override public void run() {
            //    lbConteudo_Online.setIcon( icon );  
            //} }.start();
        } catch (Exception e) {}
        
    //String endereco_img = internalStorageDir +s+"00_Externo"+s+"imagens_salvas"+s+ean+ ".gif";
    // Cria arquivo
    //File file = new File( endereco_img );
    // Se o arquivo nao existir, ele gera
    //if (!file.exists()) {
    
        //ImageIO.write(image22, "png", new File( internalStorageDir +s+"00_Externo"+s+"imagens_salvas"+s+ean+ ".png" ) );
        ImageIO.write(image22, "gif", new File( internalStorageDir +s+"00_Externo"+s+"imagens_salvas"+s+ean+ ".gif" ) );
        //ImageIO.write(image, "bmp", new File("/tmp/duke.bmp"));
        //ImageIO.write(image, "tiff", new File("/tmp/duke.tiff"));
        
                //Salvar o int e salvar imagem se nã´tiver salva antes 
                salvar_ean_pesquisado( ultimoInt, ean );
    //}
    
    
                salvar_int_pesquisado( ultimoInt );
                
            //} catch (Exception e) {
                /*
                jLabel1.setText( "Erro: " + e.getMessage() + " - Pesquisando - Contador: " + contador + " - Ean: " + ean );
                System.err.println( e.getMessage() );
                System.err.println( "https://cdn-cosmos.bluesoft.com.br/products/" + ean + "\n\n" );
                jLabel2.setText( "https://cdn-cosmos.bluesoft.com.br/products/" + ean );
                */
           // }

        } catch( Exception e ){ 
            
            try{ 
                lbConteudo_Online.setText( "Erro: " + e.getMessage().toString() + "\n - Pesquisando - Contador: " + contador + " - Ean: " + ean );
            } catch( Exception e2 ){}
                                    
            try{ Thread.sleep( 5000 );  } catch( Exception e2 ){}
            
            //try{ System.err.println( "Ean: "+ ean + " - int - " + ultimoInt );  } catch( Exception e2 ){}
            //e.printStackTrace();  
        }
        finally{
            
            /*
            new Thread() {   @Override public void run() {
                lerTxt();   
            } }.start();
            */
        }
    }
    
    private void salvar_ean_pesquisado( int ultimoInt, String ean_pesquisado ){
        
        /*new Thread() {   @Override public void run() { Thread.sleep( 1 );*/         
            try {
                boolean nl = true;
                String endereco_txt_mensagens = internalStorageDir +s+"00_Externo"+s+"eans_pesquisados"+ s + "eans_pesquisados" + ".txt";
                                                    
                BufferedWriter out = new BufferedWriter(new FileWriter(endereco_txt_mensagens ,true));
                out.write( ean_pesquisado );
                if(nl) { out.newLine(); }
                
                out.close();
            } catch (Exception e) {}
        /*} }.start();*/
    }
    
    private void salvar_int_pesquisado( int ultimoInt ){
        
        /*new Thread() {   @Override public void run() { Thread.sleep( 1 );*/         
            try {
                
                String endereco_txt = internalStorageDir + s + "00_Externo" + s + "ultimo_int_pesquisado" + ".txt";
                
                // Cria arquivo
                File file = new File( endereco_txt );

                // Se o arquivo nao existir, ele gera
                if (!file.exists()) {
                    file.createNewFile();
                    
                    // Prepara para escrever no arquivo
                    FileWriter fw = new FileWriter(file.getAbsoluteFile());
                    BufferedWriter bw = new BufferedWriter(fw);
            
                    // Escreve e fecha arquivo
                    bw.write( String.valueOf( ultimoInt) );
                    bw.close();
                }
                else{
                    //existe
                    // Prepara para escrever no arquivo
                    FileWriter fw = new FileWriter(file.getAbsoluteFile());
                    BufferedWriter bw = new BufferedWriter(fw);
            
                    // Escreve e fecha arquivo
                    bw.write( String.valueOf( ultimoInt) );
                    bw.close();
                }
                
            } catch (IOException e) {}
        /*} }.start();*/
    }


}
